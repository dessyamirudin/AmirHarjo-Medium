input_df$val = input_matrix[as.matrix(input_df[c('y','x')])]
input_df = input_df %>% mutate(rowNumb=row_number()) %>%
mutate(color_grid = ifelse((x<4 & (rowNumb<28 | rowNumb>54))|(x>6 & (rowNumb<28 | rowNumb>54))|((x>3 & x<7) & (rowNumb>27 & rowNumb<55)),1,0)) %>%
mutate(color_grid = factor(color_grid,levels=c("0","1"))) %>%
mutate(color_label = factor(ifelse(val==0,0,1),levels=c("0","1"))) %>%
mutate(val_null = ifelse(val==0,NA,val))
View(input_df)
ggplot(input_df, aes(x=x, y=y,label=val_null, fill=color_grid)) +
# geom_tile(fill='color_grid', colour = 'black') +
geom_tile(colour='black') +
# geom_text(size = 8, colour='black') +
geom_text(aes(size = 8, colour=color_label)) +
scale_y_reverse() +
scale_fill_manual(values = c("light blue","white")) +
scale_colour_manual(values=c("red", "black"))+
coord_equal()+
theme_classic() +
theme(axis.text  = element_blank(),
panel.grid = element_blank(),
axis.line  = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
#legend.text = element_blank(),
#legend.title= element_blank()
legend.position = "none")
ggplot(input_df, aes(x=x, y=y,label=val_null, fill=color_grid)) +
# geom_tile(fill='color_grid', colour = 'black') +
geom_tile(colour='black') +
# geom_text(size = 8, colour='black') +
geom_text(aes(size = 8, colour=color_label)) +
scale_y_reverse() +
scale_fill_manual(values = c("light blue","white")) +
scale_colour_manual(values=c("red", "black"))+
coord_equal()+
theme_classic() +
theme(axis.text  = element_blank(),
panel.grid = element_blank(),
axis.line  = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
#legend.text = element_blank(),
#legend.title= element_blank()
legend.position = "none")
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
# observeEvent(input$button, {
#   cat("Showing", input$x, "rows\n")
# })
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
shiny::runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
input_empty = rep(NA,81)
input_empty
matrix(input_empty,nrow=9)
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
rep(NA,81) %>% matrix(nrow=9) %>% as.data.frame()
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
rep(NA,81) %>% matrix(input_empty, nrow = 9, ncol=9,byrow = TRUE) %>%
as.data.frame()
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
shiny::runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
ui <- fluidPage(
actionButton(inputId = "button1", label = "Select red"),
actionButton(inputId = "button2", label = "Select blue"),
plotOutput("distPlot")
)
server <- function(input, output) {
r <- reactiveValues(my_color = "green")
output$distPlot <- renderPlot({
x <- faithful[, 2]
bins <- seq(min(x), max(x))
hist(x, breaks = bins, col = r$my_color)
})
observeEvent(input$button1, {
r$my_color <- "red"
})
observeEvent(input$button2, {
r$my_color <- "blue"
})
}
shinyApp(ui = ui, server = server)
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
input = "004300209005009001070060043006002087190007400050083000600000105003508690042910300"
length(input)
nchar(input)
input
input = 040007100530090070007060940406080751010000690053010002960030010370051000100209367
class(input)
nchar(input)
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku_back_up/sample_notifications.R')
runApp('D:/R Book/sudoku_back_up/sample_notifications.R')
runApp('D:/R Book/sudoku_back_up/sample_notifications.R')
runApp('D:/R Book/sudoku')
x="hello"
paste("input",x)
paste("input",x,sep="")
paste("input",x,sep=" ")
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
input = "040007100530090070007060940406080751010000690053010002960030010370051000100209367"
nchar(input)
str_count(input,"0")
1-str_count(input,"0")
81-str_count(input,"0")
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
input = "040007100530090070007060940406080751010000990053010002960030010370051000100209367"
input_wrong = "040007100530090070007060940406080751010000990053010002960030010370051000100209367"
input_split = as.numeric(unlist(str_split(input_wrong, pattern="")))
# create matrix
input_matrix = matrix(input_split, nrow = 9, byrow = TRUE)
input_matrix
solveSudoku(input_matrix)
solveSudoku(input_matrix)==NULL
solveSudoku(input_matrix)==NA
is.null(solveSudoku(input_matrix))
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp()
runApp('D:/R Book/sudoku')
Sys.timezone()
Sys.Date()
Sys.Date()
with_tz(Sys.Date(), "Pacific/Auckland")
lubridate::with_tz(Sys.Date(), "Pacific/Auckland")
lubridate::with_tz(Sys.Date(), "Europe/London")
runApp('D:/R Book/sudoku')
library(sudoku)
library(lubridate)
puz <- fetchSudokuUK()
puz
Sys.Date()
puz2 <- fetchSudokuUK(Sys.Date())
puz2
is.null(fetchSudokuUK(Sys.Date()))
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
puz <- fetchSudokuUK()
puz
Sys.Date()
puz2 <- fetchSudokuUK(Sys.Date())
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
lubridate::with_tz(Sys.Date(), "Europe/London")
puz3 <- fetchSudokuUK(lubridate::with_tz(Sys.Date(), "Europe/London"))
cat("hi")
cat(paste("hi","ho"))
runApp('D:/R Book/sudoku_back_up/sample_validate.R')
runApp('D:/R Book/sudoku_back_up/sample_validate.R')
runApp('D:/R Book/sudoku_back_up/sample_validate.R')
runApp('D:/R Book/sudoku_back_up/sample_validate.R')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
puz <- fetchSudokuUK()
pu
puz
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
Sys.time()
Sys.time() - 8
library(rsconnect)
rsconnect::setAccountInfo(name='amirharjo',
token='70E6F423B26B13EC5A892F4E66E0CCCD',
secret='4qY6panueJeAKwZ4cXq9SB0FRAikYDv3hU2iQ2sA')
rsconnect::deployApp('D:/R Book/sudoku')
rsconnect::deployApp('D:/R Book/sudoku')
rsconnect::deployApp('D:/R Book/sudoku')
puz2 <- fetchSudokuUK(Sys.Date())
Sys.Date()
Sys.Date()+1
puz2 <- fetchSudokuUK(Sys.Date()+1)
is.error(fetchSudokuUK(Sys.Date()+1))
stop("foo")
try(stop("foo"))
x = try(stop("foo"))
x
print(is.error(x))
x = 1
print(is.error(x))
x = tryCatch(stop("foo"))
x
print(is.error(x))
x = 1
print(is.error(x))
y= simpleError(stop("foo"))
y
simpleError("hi")
x = tryCatch(stop("foo"))
x
rem(x)
rm(x)
x = tryCatch(stop("foo"))
x
e <- try(stop("throwing a try-error"))
attr(e, "condition")
e
is_simple_error <- function(x) inherits(x, "simpleError")
is_simple_error()
f <- function() stop("!")
# Enters browser
f()
# Runs normally
f()
puz2 <- fetchSudokuUK(Sys.Date()+1)
runApp('D:/R Book/sudoku')
puz2 <- try(fetchSudokuUK(Sys.Date()+1))
puz2 <- try(fetchSudokuUK(Sys.Date()))
puz2
### using silent to make error not out
res <- try(log("a"),silent = TRUE)
res
class(res)
puz2 <- try(fetchSudokuUK(Sys.Date()+1))
puz2 <- try(fetchSudokuUK(Sys.Date()+1),silent=TRUE)
class(puz2)
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
class(puz2)
if (class(puz2)=="try_error"){
"yes error"
}
if (class(puz2)=="try_error"){
print("yes error")
}
x= if (class(puz2)=="try_error"){
print("yes error")
}
x
if (class(puz2)=="try_error"){
x="yes error"
}
x
if (class(puz2)=="try-error"){
x="yes error"
}
x
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp()
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
# input NA
data=rep(NA,81) %>% matrix(nrow = 9) %>% as.data.frame()
data
is.na(data)
sum(is.na(data))
sum(is.na(data))>1
runApp('D:/R Book/sudoku')
runApp('D:/R Book/sudoku')
library(rsconnect)
rsconnect::setAccountInfo(name='amirharjo',
token='70E6F423B26B13EC5A892F4E66E0CCCD',
secret='4qY6panueJeAKwZ4cXq9SB0FRAikYDv3hU2iQ2sA')
rsconnect::deployApp('D:/R Book/sudoku')
data = read.csv("D:/R Book/ships_data/ships.csv")
head(data)
View(data)
table(data$ship_type,data$SHIPNAME)
table(data$ship_type,data$ship_type)
table(data$ship_type)
table(data$ship_type,data$SHIPTYPE)
unique(data$ship_type)
shiny::runApp('D:/R Book/ships')
runApp('D:/R Book/ships')
runApp('D:/R Book/ships')
runApp('D:/R Book/ships')
runApp('D:/R Book/ships')
runApp('D:/R Book/ships')
shinyApp(ui = ui, server = server)
runApp('D:/R Book/ships_data/test_shiny.R')
library(gapminder)
install.packages("gapminder")
runApp('D:/R Book/ships_data/test_shiny.R')
shiny::runApp('D:/R Book/ships_app')
runApp('D:/R Book/ships_app')
runApp('D:/R Book/ships_app')
library(rsconnect)
rsconnect::setAccountInfo(name='amirharjo',
token='70E6F423B26B13EC5A892F4E66E0CCCD',
secret='4qY6panueJeAKwZ4cXq9SB0FRAikYDv3hU2iQ2sA')
rsconnect::deployApp('D:/R Book/ships_app')
setwd("D:\\Competition\\BRIHack\\bri-data-hackathon-people-analytic")
library(tidyverse)
library(psych)
library(corrplot)
library(tidyverse)
library(psych)
library(corrplot)
train = read.csv("train.csv")
head(train)
dim(train)
str(train)
map(train, ~sum(is.na(.)))
train %>% select(where(is.numeric)) %>% pairs()
train.factor = train %>% select(where(!is.numeric))
train.factor = train %>% select(-where(is.numeric))
colnames(train.factor)
table(train$job_level)
table(train$job_level).hist
table(train$job_level).hist()
hist(table(train$job_level))
plot(table(train$job_level))
table(train$job_level)
table(train$job_level)
plot(train$job_level)
#table(train$job_level)
plot(train$job_level)
table(train$job_level)
# plot(train$job_level)
# table(train$job_level)
plot(train$job_level)
# table(train$job_level)
barplot(table(train$job_level))
table(train$job_level)
barplot(prop.table(table(train$job_level)))
table(train$job_level)
barplot(prop.table(table(train$job_level)))
prop.table(table(train$job_level,train$Best.Performance))
table(train$job_level)
barplot(prop.table(table(train$job_level)))
prop.table(table(train$job_level,train$Best.Performance),1)
# person_level
table(train$person_level)
barplot(prop.table(table(train$person_levell)))
# person_level
table(train$person_level)
barplot(prop.table(table(train$person_level)))
prop.table(table(train$person_level,train$Best.Performance),1)
# Employee_type
table(train$Employee_type)
barplot(prop.table(table(train$Employee_type)))
prop.table(table(train$Employee_type,train$Best.Performance),1)
# Employee_status
table(train$Employee_status)
barplot(prop.table(table(train$Employee_status)))
prop.table(table(train$Employee_status,train$Best.Performance),1)
# gender
table(train$gender)
barplot(prop.table(table(train$gender)))
prop.table(table(train$gender,train$Best.Performance),1)
# marital_status_maried.Y.N.
table(train$marital_status_maried.Y.N.)
barplot(prop.table(table(train$marital_status_maried.Y.N.)))
prop.table(table(train$marital_status_maried.Y.N.,train$Best.Performance),1)
# Education_level
table(train$Education_level)
barplot(prop.table(table(train$Education_level)))
prop.table(table(train$Education_level,train$Best.Performance),1)
# year_graduated
table(train$year_graduated)
barplot(prop.table(table(train$year_graduated)))
prop.table(table(train$year_graduated,train$Best.Performance),1)
# achievement_target_1
table(train$achievement_target_1)
barplot(prop.table(table(train$achievement_target_1)))
prop.table(table(train$achievement_target_1,train$Best.Performance),1)
# achievement_target_2
table(train$achievement_target_2)
barplot(prop.table(table(train$achievement_target_2)))
prop.table(table(train$achievement_target_2,train$Best.Performance),1)
# achievement_target_3
table(train$achievement_target_3)
barplot(prop.table(table(train$achievement_target_3)))
prop.table(table(train$achievement_target_3,train$Best.Performance),1)
# to measure the VIF, should try to create model first and take out from the model
colnames(train)
setwd("D:/Blog Purpose/AmirHarjo-Medium/geolocation kabupaten kecamatan")
setwd("/geolocation kabupaten kecamatan")
setwd("geolocation kabupaten kecamatan")
setwd("../geolocation kabupaten kecamatan")
dir()
library(tidyverse)
library(geodata)
install.packages("geodata")
install.packages("geodata")
library(geodata)
library(geodata)
